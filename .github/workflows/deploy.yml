name: Deploy MCP Server

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  validate:
    name: Validate Before Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: üöÄ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: üîç Validate Secrets
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          echo "üîç Validating required secrets..."
          
          # Check SSH_PRIVATE_KEY
          if [ -z "$SSH_PRIVATE_KEY" ]; then
            echo "‚ùå SSH_PRIVATE_KEY is not set"
            exit 1
          fi
          
          if ! echo "$SSH_PRIVATE_KEY" | grep -q "BEGIN.*PRIVATE KEY"; then
            echo "‚ùå SSH_PRIVATE_KEY format is invalid"
            exit 1
          fi
          
          # Check SERVER_IP
          if [ -z "$SERVER_IP" ]; then
            echo "‚ùå SERVER_IP is not set"
            exit 1
          fi
          
          # Check SERVER_USER
          if [ -z "$SERVER_USER" ]; then
            echo "‚ùå SERVER_USER is not set"
            exit 1
          fi
          
          echo "‚úÖ All required secrets are validated"
      
      - name: üì¶ Install Dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: üîç Check for Missing Dependencies
        run: |
          echo "üîç Checking for missing dependencies..."
          
          # Run depcheck (allow it to fail without stopping the workflow)
          npx depcheck --json > depcheck-report.json || true
          
          # Check if there are any missing dependencies
          if [ -f depcheck-report.json ]; then
            MISSING_COUNT=$(jq '.missing | length' depcheck-report.json)
            if [ "$MISSING_COUNT" -gt 0 ]; then
              echo "‚ö†Ô∏è Warning: Found missing dependencies:"
              jq '.missing' depcheck-report.json
            else
              echo "‚úÖ No missing dependencies found"
            fi
          fi
      
      - name: üèóÔ∏è Build Project
        run: npm run build
      
      - name: üß™ Run Tests
        run: npm test || echo "‚ö†Ô∏è No tests configured or tests failed"
        continue-on-error: true
      
      - name: üìä Validation Summary
        run: |
          echo "‚úÖ Validation completed successfully!"
          echo "üì¶ Dependencies installed and checked"
          echo "üèóÔ∏è Build completed without errors"
          echo "‚úÖ Ready for deployment"

  deploy:
    name: Deploy to Server
    needs: validate
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: üöÄ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: üì¶ Install Dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: üèóÔ∏è Build Project
        run: npm run build
      
      - name: üîë Setup SSH Key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true
      
      - name: üîç Test SSH Connection
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          echo "üîç Testing SSH connection..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            -o ConnectTimeout=10 \
            ${SERVER_USER}@${SERVER_IP} "echo '‚úÖ SSH connection successful'"
      
      - name: üì¶ Create Backup on Server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PATH: ${{ secrets.SERVER_PATH || '/opt/junaikey' }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} << 'ENDSSH'
            set -e
            
            # Create backup directory with timestamp
            BACKUP_DIR="${SERVER_PATH}_backup_$(date +%Y%m%d_%H%M%S)"
            
            if [ -d "${SERVER_PATH}" ]; then
              echo "üì¶ Creating backup at $BACKUP_DIR"
              cp -r ${SERVER_PATH} $BACKUP_DIR
              
              # Keep only the last 5 backups
              echo "üßπ Cleaning up old backups..."
              ls -dt ${SERVER_PATH}_backup_* 2>/dev/null | tail -n +6 | xargs rm -rf || true
              
              echo "‚úÖ Backup created successfully"
            else
              echo "‚ö†Ô∏è No existing deployment found, skipping backup"
            fi
          ENDSSH
      
      - name: üö¢ Deploy to Server
        id: deploy
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PATH: ${{ secrets.SERVER_PATH || '/opt/junaikey' }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} << 'ENDSSH'
            set -e
            echo "üìç Navigating to deployment directory..."
            cd ${SERVER_PATH}
            
            echo "üîÑ Pulling latest changes from main branch..."
            git fetch origin
            git reset --hard origin/main
            
            echo "üì¶ Installing/updating dependencies..."
            npm ci --production --prefer-offline --no-audit
            
            echo "üèóÔ∏è Building project..."
            npm run build
            
            echo "üîÑ Restarting MCP Server service..."
            sudo systemctl restart mcp-server
            
            echo "‚è≥ Waiting for service to start..."
            sleep 3
            
            echo "‚úÖ Checking service status..."
            if sudo systemctl is-active --quiet mcp-server; then
              echo "‚úÖ Service is running"
              sudo systemctl status mcp-server --no-pager || true
            else
              echo "‚ùå Service failed to start"
              sudo systemctl status mcp-server --no-pager || true
              exit 1
            fi
            
            echo "üéâ Deployment completed successfully!"
          ENDSSH
      
      - name: üîÑ Rollback on Failure
        if: failure() && steps.deploy.outcome == 'failure'
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PATH: ${{ secrets.SERVER_PATH || '/opt/junaikey' }}
        run: |
          echo "üîÑ Deployment failed, attempting rollback..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} << 'ENDSSH'
            # Find the latest backup
            LATEST_BACKUP=$(ls -dt ${SERVER_PATH}_backup_* 2>/dev/null | head -n 1)
            
            if [ -n "$LATEST_BACKUP" ] && [ -d "$LATEST_BACKUP" ]; then
              echo "üîÑ Rolling back to $LATEST_BACKUP"
              
              # Remove failed deployment
              rm -rf ${SERVER_PATH}
              
              # Restore from backup
              cp -r $LATEST_BACKUP ${SERVER_PATH}
              
              # Restart service
              sudo systemctl restart mcp-server
              
              echo "‚úÖ Rollback completed"
            else
              echo "‚ö†Ô∏è No backup found, cannot rollback"
            fi
          ENDSSH
      
      - name: üßπ Cleanup SSH Key
        if: always()
        run: rm -f ~/.ssh/deploy_key
      
      - name: üìä Deployment Status
        if: success()
        run: |
          echo "‚úÖ Deployment completed successfully at $(date)"
          echo "üìã Commit: ${{ github.sha }}"
          echo "üë§ Triggered by: ${{ github.actor }}"
      
      - name: ‚ùå Deployment Failed
        if: failure()
        run: |
          echo "‚ùå Deployment failed at $(date)"
          echo "üìã Commit: ${{ github.sha }}"
          echo "üë§ Triggered by: ${{ github.actor }}"
          echo "üîç Please check the logs above for details"
          exit 1

  notify:
    name: Send Notification
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: üì¢ Notify Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment notification: SUCCESS"
            echo "The MCP Server has been successfully deployed and restarted."
          else
            echo "‚ùå Deployment notification: FAILED"
            echo "The MCP Server deployment encountered an error."
          fi
          
      # Uncomment and configure for Slack notifications
      # - name: üì§ Send Slack Notification
      #   if: always()
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     payload: |
      #       {
      #         "text": "Deployment ${{ needs.deploy.result }}: ${{ github.repository }}",
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "Deployment *${{ needs.deploy.result }}* for <${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}"
      #             }
      #           }
      #         ]
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
