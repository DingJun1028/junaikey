name: Deploy MCP Server

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      # Updated to enable recursive submodules to fix .gitmodules error
      # Reference: CI job ref 2e45dc56b0d4c3c5c41c0a4acceff1f5b2185c43
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      # Debug step to inspect repo layout and locate index.html and main.tsx
      # Reference - CI job ref 2e45dc56b0d4c3c5c41c0a4acceff1f5b2185c43
      # This helps diagnose the Vite import resolution error (Rollup failed to resolve import "/src/main.tsx")
      # TODO: Remove this debug step after verifying CI deployment works correctly
      - name: "CI debug: inspect repo layout"
        run: |
          echo "PWD: $(pwd)"
          echo "Listing repo root:"; ls -la
          echo "Listing junaikey folder (if present):"; ls -la junaikey || true
          echo "Check index.html exists (root):"; test -f index.html && echo "Found at root" || echo "Not found at root"
          echo "Check junaikey/index.html exists:"; test -f junaikey/index.html && echo "Found in junaikey/" || echo "Not found in junaikey/"
          echo "Check main.tsx location:"; test -f src/main.tsx && echo "Found at ./src/main.tsx" || echo "Not at ./src/main.tsx"
          echo "Check junaikey/src/main.tsx:"; test -f junaikey/src/main.tsx && echo "Found at ./junaikey/src/main.tsx" || echo "Not at ./junaikey/src/main.tsx"
          echo "Show .gitmodules if present:"; cat .gitmodules 2>/dev/null || echo "No .gitmodules file"
      
      - name: 📦 Install Dependencies
        run: |
          # Try installing in junaikey subdirectory if it exists, otherwise use root
          if [ -d "junaikey" ] && [ -f "junaikey/package.json" ]; then
            echo "Installing dependencies in junaikey subdirectory"
            cd junaikey && npm ci --prefer-offline --no-audit
          else
            echo "Installing dependencies in root directory"
            npm ci --prefer-offline --no-audit
          fi
      
      - name: 🏗️ Build Project
        run: |
          # Try building in junaikey subdirectory if it exists, otherwise use root
          if [ -d "junaikey" ] && [ -f "junaikey/package.json" ]; then
            echo "Building in junaikey subdirectory"
            cd junaikey && npm run build
          else
            echo "Building in root directory"
            npm run build
          fi
        
      - name: 🧪 Run Tests (Optional)
        run: |
          # Try running tests in junaikey subdirectory if it exists, otherwise use root
          if [ -d "junaikey" ] && [ -f "junaikey/package.json" ]; then
            echo "Running tests in junaikey subdirectory"
            cd junaikey && npm test || echo "No tests configured"
          else
            echo "Running tests in root directory"
            npm test || echo "No tests configured"
          fi
        continue-on-error: true
      
      - name: 🔑 Setup SSH Key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true
      
      - name: 🚢 Deploy to Server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PATH: ${{ secrets.SERVER_PATH || '/opt/junaikey' }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} << 'ENDSSH'
            set -e
            echo "📍 Navigating to deployment directory..."
            cd ${SERVER_PATH}
            
            echo "🔄 Pulling latest changes from main branch..."
            git fetch origin
            git reset --hard origin/main
            
            echo "📦 Installing/updating dependencies..."
            npm ci --production --prefer-offline --no-audit
            
            echo "🏗️ Building project..."
            npm run build
            
            echo "🔄 Restarting MCP Server service..."
            sudo systemctl restart mcp-server
            
            echo "✅ Checking service status..."
            sudo systemctl status mcp-server --no-pager || true
            
            echo "🎉 Deployment completed successfully!"
          ENDSSH
      
      - name: 🧹 Cleanup SSH Key
        if: always()
        run: rm -f ~/.ssh/deploy_key
      
      - name: 📊 Deployment Status
        if: success()
        run: |
          echo "✅ Deployment completed successfully at $(date)"
          echo "📋 Commit: ${{ github.sha }}"
          echo "👤 Triggered by: ${{ github.actor }}"
      
      - name: ❌ Deployment Failed
        if: failure()
        run: |
          echo "❌ Deployment failed at $(date)"
          echo "📋 Commit: ${{ github.sha }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "🔍 Please check the logs above for details"
          exit 1

  notify:
    name: Send Notification
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📢 Notify Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment notification: SUCCESS"
            echo "The MCP Server has been successfully deployed and restarted."
          else
            echo "❌ Deployment notification: FAILED"
            echo "The MCP Server deployment encountered an error."
          fi
          
      # Uncomment and configure for Slack notifications
      # - name: 📤 Send Slack Notification
      #   if: always()
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     payload: |
      #       {
      #         "text": "Deployment ${{ needs.deploy.result }}: ${{ github.repository }}",
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "Deployment *${{ needs.deploy.result }}* for <${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}"
      #             }
      #           }
      #         ]
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
