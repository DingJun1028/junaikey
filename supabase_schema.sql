-- =============================================================================
-- 🌌 JunAiKey OmniKey 自動化系統 - Supabase 資料庫架構
-- Version: 1.0
-- =============================================================================
-- 這份 SQL 建立三個核心資料表，支持 GitHub Actions 自動同步功能
-- =============================================================================

-- =============================================================================
-- 📝 ai_logs - 技能執行紀錄表
-- 用於記錄每次技能執行的詳細資訊
-- =============================================================================
CREATE TABLE IF NOT EXISTS public.ai_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    skill VARCHAR(100) NOT NULL,
    status VARCHAR(20) NOT NULL CHECK (status IN ('success', 'failed', 'pending')),
    error TEXT,
    actor VARCHAR(100) NOT NULL,
    source VARCHAR(50) NOT NULL,
    executed_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- 建立索引以提升查詢效能
CREATE INDEX IF NOT EXISTS idx_ai_logs_skill ON public.ai_logs(skill);
CREATE INDEX IF NOT EXISTS idx_ai_logs_status ON public.ai_logs(status);
CREATE INDEX IF NOT EXISTS idx_ai_logs_actor ON public.ai_logs(actor);
CREATE INDEX IF NOT EXISTS idx_ai_logs_source ON public.ai_logs(source);
CREATE INDEX IF NOT EXISTS idx_ai_logs_executed_at ON public.ai_logs(executed_at);

-- =============================================================================
-- 🔄 sync_events - 同步事件表
-- 用於記錄跨平台同步的狀態和結果
-- =============================================================================
CREATE TABLE IF NOT EXISTS public.sync_events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_type VARCHAR(50) NOT NULL,
    source_platform VARCHAR(50) NOT NULL,
    target_platform VARCHAR(50) NOT NULL,
    status VARCHAR(20) NOT NULL CHECK (status IN ('pending', 'syncing', 'completed', 'failed')),
    payload JSONB NOT NULL,
    response_data JSONB,
    error_message TEXT,
    triggered_by VARCHAR(100) NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    completed_at TIMESTAMPTZ
);

-- 建立索引以提升查詢效能
CREATE INDEX IF NOT EXISTS idx_sync_events_event_type ON public.sync_events(event_type);
CREATE INDEX IF NOT EXISTS idx_sync_events_status ON public.sync_events(status);
CREATE INDEX IF NOT EXISTS idx_sync_events_source_platform ON public.sync_events(source_platform);
CREATE INDEX IF NOT EXISTS idx_sync_events_target_platform ON public.sync_events(target_platform);
CREATE INDEX IF NOT EXISTS idx_sync_events_created_at ON public.sync_events(created_at);

-- =============================================================================
-- ⭐ favorites - 優化收藏表
-- 用於儲存常用技能、模板或配置的收藏
-- =============================================================================
CREATE TABLE IF NOT EXISTS public.favorites (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    item_type VARCHAR(50) NOT NULL CHECK (item_type IN ('skill', 'template', 'config', 'workflow')),
    item_id VARCHAR(100) NOT NULL,
    item_name VARCHAR(200) NOT NULL,
    item_data JSONB NOT NULL,
    owner VARCHAR(100) NOT NULL,
    is_public BOOLEAN NOT NULL DEFAULT FALSE,
    usage_count INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    last_used_at TIMESTAMPTZ
);

-- 建立索引以提升查詢效能
CREATE INDEX IF NOT EXISTS idx_favorites_item_type ON public.favorites(item_type);
CREATE INDEX IF NOT EXISTS idx_favorites_owner ON public.favorites(owner);
CREATE INDEX IF NOT EXISTS idx_favorites_is_public ON public.favorites(is_public);
CREATE INDEX IF NOT EXISTS idx_favorites_usage_count ON public.favorites(usage_count);
CREATE INDEX IF NOT EXISTS idx_favorites_created_at ON public.favorites(created_at);

-- =============================================================================
-- 🔧 設定 RLS (Row Level Security) 策略
-- 確保資料安全和權限控制
-- =============================================================================

-- ai_logs 表的 RLS 策略
ALTER TABLE public.ai_logs ENABLE ROW LEVEL SECURITY;

-- 允許所有人讀取
CREATE POLICY "Public read access" ON public.ai_logs FOR SELECT USING (true);

-- 只有系統或授權使用者可以插入
CREATE POLICY "System insert access" ON public.ai_logs FOR INSERT WITH CHECK (
    actor IN ('System', 'GitHubAction', 'Straico', 'AITable', 'Boost')
);

-- sync_events 表的 RLS 策略
ALTER TABLE public.sync_events ENABLE ROW LEVEL SECURITY;

-- 允許所有人讀取
CREATE POLICY "Public read access" ON public.sync_events FOR SELECT USING (true);

-- 只有系統或授權使用者可以插入
CREATE POLICY "System insert access" ON public.sync_events FOR INSERT WITH CHECK (
    triggered_by IN ('System', 'GitHubAction', 'Straico', 'AITable', 'Boost')
);

-- favorites 表的 RLS 策略
ALTER TABLE public.favorites ENABLE ROW LEVEL SECURITY;

-- 允許讀取自己或公開的收藏
CREATE POLICY "Users can view own and public favorites" ON public.favorites FOR SELECT USING (
    owner = auth.uid()::text OR is_public = true
);

-- 允許使用者插入自己的收藏
CREATE POLICY "Users can insert own favorites" ON public.favorites FOR INSERT WITH CHECK (
    owner = auth.uid()::text
);

-- 允許使用者更新自己的收藏
CREATE POLICY "Users can update own favorites" ON public.favorites FOR UPDATE USING (
    owner = auth.uid()::text
);

-- 允許使用者刪除自己的收藏
CREATE POLICY "Users can delete own favorites" ON public.favorites FOR DELETE USING (
    owner = auth.uid()::text
);

-- =============================================================================
-- ⚡ 建立函數以自動更新 updated_at 時間戳
-- =============================================================================
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 為所有表格建立觸發器
CREATE TRIGGER handle_ai_logs_updated_at
    BEFORE UPDATE ON public.ai_logs
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

CREATE TRIGGER handle_sync_events_updated_at
    BEFORE UPDATE ON public.sync_events
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

CREATE TRIGGER handle_favorites_updated_at
    BEFORE UPDATE ON public.favorites
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

-- =============================================================================
-- 🌟 建立視圖以簡化查詢
-- =============================================================================

-- 技能執行統計視圖
CREATE OR REPLACE VIEW public.skill_execution_stats AS
SELECT
    skill,
    status,
    COUNT(*) as execution_count,
    COUNT(CASE WHEN status = 'success' THEN 1 END) as success_count,
    COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed_count,
    MIN(executed_at) as first_execution,
    MAX(executed_at) as last_execution
FROM public.ai_logs
GROUP BY skill, status;

-- 同步事件統計視圖
CREATE OR REPLACE VIEW public.sync_event_stats AS
SELECT
    event_type,
    source_platform,
    target_platform,
    status,
    COUNT(*) as event_count,
    MIN(created_at) as first_sync,
    MAX(created_at) as last_sync
FROM public.sync_events
GROUP BY event_type, source_platform, target_platform, status;

-- =============================================================================
-- 🎯 建立常用查詢的預存程序
-- =============================================================================

-- 取得最近24小時的技能執行統計
CREATE OR REPLACE FUNCTION public.get_recent_skill_stats(hours INT DEFAULT 24)
RETURNS TABLE(
    skill VARCHAR(100),
    total_executions INTEGER,
    successful_executions INTEGER,
    failed_executions INTEGER,
    success_rate FLOAT
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        skill,
        SUM(execution_count) as total_executions,
        SUM(CASE WHEN status = 'success' THEN execution_count ELSE 0 END) as successful_executions,
        SUM(CASE WHEN status = 'failed' THEN execution_count ELSE 0 END) as failed_executions,
        ROUND(
            (SUM(CASE WHEN status = 'success' THEN execution_count ELSE 0 END) * 100.0) / 
            NULLIF(SUM(execution_count), 0), 2
        ) as success_rate
    FROM (
        SELECT
            skill,
            status,
            COUNT(*) as execution_count
        FROM public.ai_logs
        WHERE executed_at >= NOW() - INTERVAL '1 hour' * hours
        GROUP BY skill, status
    ) as grouped_stats
    GROUP BY skill
    ORDER BY total_executions DESC;
END;
$$ LANGUAGE plpgsql;

-- =============================================================================
-- ✅ 完成！
-- 現在您可以執行這份 SQL 來建立完整的 JunAiKey 自動化系統資料庫架構
-- =============================================================================
